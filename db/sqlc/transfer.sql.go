// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: transfer.sql

package db

import (
	"context"
	"time"
)

const createTransfer = `-- name: CreateTransfer :one
INSERT INTO transfers (
  src_account_id,
  dest_account_id,
  amount
) VALUES (
  $1, $2, $3
)
RETURNING id, src_account_id, dest_account_id, amount, created_at
`

type CreateTransferParams struct {
	SrcAccountID  int64 `json:"src_account_id"`
	DestAccountID int64 `json:"dest_account_id"`
	Amount        int64 `json:"amount"`
}

func (q *Queries) CreateTransfer(ctx context.Context, arg CreateTransferParams) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, createTransfer, arg.SrcAccountID, arg.DestAccountID, arg.Amount)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.SrcAccountID,
		&i.DestAccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const getAccountTransfersSum = `-- name: GetAccountTransfersSum :one
SELECT 
    COALESCE(SUM(CASE WHEN src_account_id = $1 THEN -amount ELSE amount END), 0) as net_transfer_amount
FROM transfers
WHERE src_account_id = $1 OR dest_account_id = $1
`

func (q *Queries) GetAccountTransfersSum(ctx context.Context, srcAccountID int64) (interface{}, error) {
	row := q.db.QueryRowContext(ctx, getAccountTransfersSum, srcAccountID)
	var net_transfer_amount interface{}
	err := row.Scan(&net_transfer_amount)
	return net_transfer_amount, err
}

const getTransfer = `-- name: GetTransfer :one
SELECT id, src_account_id, dest_account_id, amount, created_at FROM transfers
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTransfer(ctx context.Context, id int64) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, getTransfer, id)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.SrcAccountID,
		&i.DestAccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const listTransfers = `-- name: ListTransfers :many
SELECT id, src_account_id, dest_account_id, amount, created_at FROM transfers
WHERE 
    src_account_id = $1 OR
    dest_account_id = $2
ORDER BY id
LIMIT $3
OFFSET $4
`

type ListTransfersParams struct {
	SrcAccountID  int64 `json:"src_account_id"`
	DestAccountID int64 `json:"dest_account_id"`
	Limit         int32 `json:"limit"`
	Offset        int32 `json:"offset"`
}

func (q *Queries) ListTransfers(ctx context.Context, arg ListTransfersParams) ([]Transfer, error) {
	rows, err := q.db.QueryContext(ctx, listTransfers,
		arg.SrcAccountID,
		arg.DestAccountID,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transfer
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.SrcAccountID,
			&i.DestAccountID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTransfersByDateRange = `-- name: ListTransfersByDateRange :many
SELECT id, src_account_id, dest_account_id, amount, created_at FROM transfers
WHERE 
    (src_account_id = $1 OR dest_account_id = $2) AND
    created_at BETWEEN $3 AND $4
ORDER BY created_at DESC
LIMIT $5
OFFSET $6
`

type ListTransfersByDateRangeParams struct {
	SrcAccountID  int64     `json:"src_account_id"`
	DestAccountID int64     `json:"dest_account_id"`
	CreatedAt     time.Time `json:"created_at"`
	CreatedAt_2   time.Time `json:"created_at_2"`
	Limit         int32     `json:"limit"`
	Offset        int32     `json:"offset"`
}

func (q *Queries) ListTransfersByDateRange(ctx context.Context, arg ListTransfersByDateRangeParams) ([]Transfer, error) {
	rows, err := q.db.QueryContext(ctx, listTransfersByDateRange,
		arg.SrcAccountID,
		arg.DestAccountID,
		arg.CreatedAt,
		arg.CreatedAt_2,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transfer
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.SrcAccountID,
			&i.DestAccountID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
